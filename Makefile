#
# Makefile - Command for 'make' build system
#
# This file is a part of SnakeSenzia project
# 
# Copyright (C) 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023 CyberDay Studios. All right reserved.
# Author: Nguyen Duy Thanh (segfault.e404)
#

# Generic configurations
CC=g++
LD=$(CC)
OBJDUMP=objdump
LIPO=lipo
SRC_FILE=snake.cpp
CC_VERSION=$(shell $(CC) --version | grep version)

# Directory and File configurations
ROOT_DIR=$(PWD)
SFML_ROOT_DIR=$(ROOT_DIR)/SFML
SFML_SRC_DIR=$(SFML_ROOT_DIR)
SFML_BUILD_DIR=$(SFML_ROOT_DIR)/build
SFML_INCLUDE_DIR=$(SFML_ROOT_DIR)/include
SFML_LIB_DIR=$(SFML_BUILD_DIR)/lib
INCLUDE_DIR=$(ROOT_DIR) -I$(SFML_INCLUDE_DIR)
OBJECT_DIR=$(ROOT_DIR)/obj
BUILD_DIR=$(ROOT_DIR)/build
DISASM_DIR=$(ROOT_DIR)/disasm
DISASM_CC_DIR=$(DISASM_DIR)/gcc
DISASM_OBJDUMP_DIR=$(DISASM_DIR)/objdump

# Specific Directory and File configurations
# arch=x86_64
DISASM_CC_DIR_X86_64=$(DISASM_CC_DIR)/x86_64
DISASM_CC_FILE_X86_64=$(DISASM_CC_DIR_X86_64)/SnakeSenzia.asm
DISASM_OBJDUMP_DIR_X86_64=$(DISASM_OBJDUMP_DIR)/x86_64
DISASM_OBJDUMP_FILE_X86_64=$(DISASM_OBJDUMP_DIR_X86_64)/SnakeSenzia.asm

# arch=x86_64h
DISASM_CC_DIR_X86_64_HASWELL=$(DISASM_CC_DIR)/x86_64h
DISASM_CC_FILE_X86_64_HASWELL=$(DISASM_CC_DIR_X86_64_HASWELL)/SnakeSenzia.asm
DISASM_OBJDUMP_DIR_X86_64_HASWELL=$(DISASM_OBJDUMP_DIR)/x86_64h
DISASM_OBJDUMP_FILE_X86_64_HASWELL=$(DISASM_OBJDUMP_DIR_X86_64_HASWELL)/SnakeSenzia.asm

# arch=arm64
DISASM_CC_DIR_AARCH64=$(DISASM_CC_DIR)/aarch64
DISASM_CC_FILE_AARCH64=$(DISASM_CC_DIR_AARCH64)/SnakeSenzia.asm
DISASM_OBJDUMP_DIR_AARCH64=$(DISASM_OBJDUMP_DIR)/aarch64
DISASM_OBJDUMP_FILE_AARCH64=$(DISASM_OBJDUMP_DIR_AARCH64)/SnakeSenzia.asm

# arch=arm64e
DISASM_CC_DIR_AARCH64_V83=$(DISASM_CC_DIR)/aarch64e
DISASM_CC_FILE_AARCH64_V83=$(DISASM_CC_DIR_AARCH64_V83)/SnakeSenzia.asm
DISASM_OBJDUMP_DIR_AARCH64_V83=$(DISASM_OBJDUMP_DIR)/aarch64e
DISASM_OBJDUMP_FILE_AARCH64_V83=$(DISASM_OBJDUMP_DIR_AARCH64_V83)/SnakeSenzia.asm

# arch=universal
DISASM_CC_DIR_UNIVERSAL=$(DISASM_CC_DIR)/universal
DISASM_CC_FILE_UNIVERSAL=$(DISASM_CC_DIR_UNIVERSAL)/SnakeSenzia.asm
DISASM_OBJDUMP_DIR_UNIVERSAL=$(DISASM_OBJDUMP_DIR)/universal
DISASM_OBJDUMP_FILE_UNIVERSAL=$(DISASM_OBJDUMP_DIR_UNIVERSAL)/SnakeSenzia.asm

# File output configurations
# arch=x86_64
OBJECT_DIR_X86_64=$(OBJECT_DIR)/x86_64
BUILD_DIR_X86_64=$(BUILD_DIR)/x86_64
DISASM_DIR_X86_64=$(DISASM_DIR)/x86_64
OBJECT_OUTPUT_X86_64=$(OBJECT_DIR_X86_64)/$(SRC_FILE:.cpp=.o)
EXEC_OUTPUT_X86_64=$(BUILD_DIR_X86_64)/SnakeSenzia

# arch=x86_64h
OBJECT_DIR_X86_64_HASWELL=$(OBJECT_DIR)/x86_64h
BUILD_DIR_X86_64_HASWELL=$(BUILD_DIR)/x86_64h
DISASM_DIR_X86_64_HASWELL=$(DISASM_DIR)/x86_64h
OBJECT_OUTPUT_X86_64_HASWELL=$(OBJECT_DIR_X86_64_HASWELL)/$(SRC_FILE:.cpp=.o)
EXEC_OUTPUT_X86_64_HASWELL=$(BUILD_DIR_X86_64_HASWELL)/SnakeSenzia

# arch=arm64
OBJECT_DIR_AARCH64=$(OBJECT_DIR)/aarch64
BUILD_DIR_AARCH64=$(BUILD_DIR)/aarch64
DISASM_DIR_AARCH64=$(DISASM_DIR)/aarch64
OBJECT_OUTPUT_AARCH64=$(OBJECT_DIR_AARCH64)/$(SRC_FILE:.cpp=.o)
EXEC_OUTPUT_AARCH64=$(BUILD_DIR_AARCH64)/SnakeSenzia

# arch=arm64e
OBJECT_DIR_AARCH64_V83=$(OBJECT_DIR)/aarch64e
BUILD_DIR_AARCH64_V83=$(BUILD_DIR)/aarch64e
DISASM_DIR_AARCH64=$(DISASM_DIR)/aarch64e
OBJECT_OUTPUT_AARCH64_V83=$(OBJECT_DIR_AARCH64_V83)/$(SRC_FILE:.cpp=.o)
EXEC_OUTPUT_AARCH64_V83=$(BUILD_DIR_AARCH64_V83)/SnakeSenzia

# arch=universal
BUILD_DIR_UNIVERSAL=$(BUILD_DIR)/universal
EXEC_OUTPUT_UNIVERSAL=$(BUILD_DIR_UNIVERSAL)/SnakeSenzia

LIBS=-L$(SFML_LIB_DIR) -lsfml-graphics -lsfml-window -lsfml-system

# Compile and Linking configurations

# arch=x86_64
COMPILER_FLAGS_X86_64=-std=c++17 -arch x86_64 -mavx2 -I$(INCLUDE_DIR) -c $(SRC_FILE) -o \
				$(OBJECT_OUTPUT_X86_64)

COMPILER_FLAGS_DISASM_X86_64=-std=c++17 -arch x86_64 -mavx2 -I$(INCLUDE_DIR) \
						-S -fverbose-asm $(SRC_FILE) -o $(DISASM_CC_FILE_X86_64)

OBJDUMP_DISASM_FLAGS_X86_64=-D $(OBJECT_OUTPUT_X86_64) > $(DISASM_OBJDUMP_FILE_X86_64)

LD_FLAGS_X86_64=$(OBJECT_OUTPUT_X86_64) -o $(EXEC_OUTPUT_X86_64) -arch x86_64 \
			-lncurses -lstdc++ -framework AudioToolbox -framework CoreFoundation $(LIBS)

# arch=x86_64h
COMPILER_FLAGS_X86_64_HASWELL=-std=c++17 -arch x86_64h -mavx2 -I$(INCLUDE_DIR) -c $(SRC_FILE) -o \
			$(OBJECT_OUTPUT_X86_64_HASWELL)

COMPILER_FLAGS_DISASM_X86_64_HASWELL=-std=c++17 -arch x86_64h -mavx2 -I$(INCLUDE_DIR) \
						-S -fverbose-asm $(SRC_FILE) -o $(DISASM_CC_FILE_X86_64_HASWELL)

OBJDUMP_DISASM_FLAGS_X86_64_HASWELL=-D $(OBJECT_OUTPUT_X86_64_HASWELL) >> $(DISASM_OBJDUMP_FILE_X86_64_HASWELL)

LD_FLAGS_X86_64_HASWELL=$(OBJECT_OUTPUT_X86_64_HASWELL) -o $(EXEC_OUTPUT_X86_64_HASWELL) -arch x86_64h \
			-lncurses -lstdc++ -framework AudioToolbox -framework CoreFoundation $(LIBS)

# arch=arm64/aarch64
COMPILER_FLAGS_AARCH64=-std=c++17 -arch arm64 -I$(INCLUDE_DIR) -c $(SRC_FILE) -o \
			$(OBJECT_OUTPUT_AARCH64)

COMPILER_FLAGS_DISASM_AARCH64=-std=c++17 -arch arm64 -I$(INCLUDE_DIR) \
						-S -fverbose-asm $(SRC_FILE) -o $(DISASM_CC_FILE_AARCH64) $(LIBS)

OBJDUMP_DISASM_FLAGS_AARCH64=-D $(EXEC_OUTPUT_AARCH64) > $(DISASM_OBJDUMP_FILE_AARCH64)

LD_FLAGS_AARCH64=$(OBJECT_OUTPUT_AARCH64) -o $(EXEC_OUTPUT_AARCH64) -arch arm64 \
			-lncurses -lstdc++ -framework AudioToolbox -framework CoreFoundation $(LIBS)

# arch=arm64e/aarch64e
COMPILER_FLAGS_AARCH64_V83=-std=c++17 -arch arm64e -I$(INCLUDE_DIR) -c $(SRC_FILE) -o \
			$(OBJECT_OUTPUT_AARCH64_V83)

COMPILER_FLAGS_DISASM_AARCH64_V83=-std=c++17 -arch arm64e -I$(INCLUDE_DIR) \
						-S -fverbose-asm $(SRC_FILE) -o $(DISASM_CC_FILE_AARCH64_V83)

OBJDUMP_DISASM_FLAGS_AARCH64_V83=-D $(EXEC_OUTPUT_AARCH64_V83) >> $(DISASM_OBJDUMP_FILE_AARCH64_V83)

LD_FLAGS_AARCH64_V83=$(OBJECT_OUTPUT_AARCH64_V83) -o $(EXEC_OUTPUT_AARCH64_V83) -arch arm64e \
			-lncurses -lstdc++ -framework AudioToolbox -framework CoreFoundation $(LIBS)

# arch=universal
OBJDUMP_DISASM_FLAGS_UNIVERSAL=-D $(EXEC_OUTPUT_UNIVERSAL) >> $(DISASM_OBJDUMP_FILE_UNIVERSAL)
LIPO_UNIVERSAL_FLAGS=-create $(EXEC_OUTPUT_X86_64) $(EXEC_OUTPUT_X86_64_HASWELL) $(EXEC_OUTPUT_AARCH64) $(EXEC_OUTPUT_AARCH64_V83) \
						-output $(EXEC_OUTPUT_UNIVERSAL)

# Definitions for target
# always: This target will always execute, no matter how
always:
	@echo "Compiler $(CC_VERSION)"
	@mkdir -p $(OBJECT_DIR)
	@mkdir -p $(BUILD_DIR)
	@mkdir -p $(DISASM_CC_DIR)
	@mkdir -p $(DISASM_OBJDUMP_DIR)

	@mkdir -p $(OBJECT_DIR_X86_64)
	@mkdir -p $(BUILD_DIR_X86_64)
	@mkdir -p $(DISASM_CC_DIR_X86_64)
	@mkdir -p $(DISASM_OBJDUMP_DIR_X86_64)

	@mkdir -p $(OBJECT_DIR_X86_64_HASWELL)
	@mkdir -p $(BUILD_DIR_X86_64_HASWELL)
	@mkdir -p $(DISASM_CC_DIR_X86_64_HASWELL)
	@mkdir -p $(DISASM_OBJDUMP_DIR_X86_64_HASWELL)

	@mkdir -p $(OBJECT_DIR_AARCH64)
	@mkdir -p $(BUILD_DIR_AARCH64)
	@mkdir -p $(DISASM_CC_DIR_AARCH64)
	@mkdir -p $(DISASM_OBJDUMP_DIR_AARCH64)

	@mkdir -p $(OBJECT_DIR_AARCH64_V83)
	@mkdir -p $(BUILD_DIR_AARCH64_V83)
	@mkdir -p $(DISASM_CC_DIR_AARCH64_V83)
	@mkdir -p $(DISASM_OBJDUMP_DIR_AARCH64_V83)

	$(shell cp $(SFML_BUILD_DIR)/lib/*.* $(BUILD_DIR_X86_64))
	$(shell cp $(SFML_BUILD_DIR)/lib/*.* $(BUILD_DIR_X86_64_HASWELL))
	$(shell cp $(SFML_BUILD_DIR)/lib/*.* $(BUILD_DIR_AARCH64))
	$(shell cp $(SFML_BUILD_DIR)/lib/*.* $(BUILD_DIR_AARCH64_V83))
	$(shell cp $(SFML_BUILD_DIR)/lib/*.* $(BUILD_DIR_UNIVERSAL))

# x86_64
x86_64: always
	@echo "Building x86_64 executable"
	@$(CC) $(COMPILER_FLAGS_X86_64)
	@$(CC) $(COMPILER_FLAGS_DISASM_X86_64)
	@$(LD) $(LD_FLAGS_X86_64)
	@$(OBJDUMP) $(OBJDUMP_DISASM_FLAGS_X86_64)

# x86_64 (Intel Haswell and up)
x86_64h: always
	@echo "Building x86_64 (haswell) executable"
	@$(CC) $(COMPILER_FLAGS_X86_64_HASWELL)
	@$(CC) $(COMPILER_FLAGS_DISASM_X86_64_HASWELL)
	@$(LD) $(LD_FLAGS_X86_64_HASWELL)
	@$(OBJDUMP) $(OBJDUMP_DISASM_FLAGS_X86_64_HASWELL)

# arm64: Mobile device
arm64: always
	@echo "Building arm64 executable"
	@$(CC) $(COMPILER_FLAGS_AARCH64)
	@$(CC) $(COMPILER_FLAGS_DISASM_AARCH64)
	@$(LD) $(LD_FLAGS_AARCH64)
	@$(OBJDUMP) $(OBJDUMP_DISASM_FLAGS_AARCH64)

# arm64e (ARM64v8.3): Apple Silicon and ARMv8.3 architectures
arm64e: always
	@echo "Building arm64e executable"
	@$(CC) $(COMPILER_FLAGS_AARCH64_V83)
	@$(CC) $(COMPILER_FLAGS_DISASM_AARCH64_V83)
	@$(LD) $(LD_FLAGS_AARCH64_V83)
	@$(OBJDUMP) $(OBJDUMP_DISASM_FLAGS_AARCH64_V83)
	
all: x86_64 x86_64h arm64
	@echo "Creating fat executable"
	@mkdir -p $(BUILD_DIR_UNIVERSAL)
	@mkdir -p $(DISASM_OBJDUMP_DIR_UNIVERSAL)
	@$(LIPO) $(LIPO_UNIVERSAL_FLAGS)
	@$(OBJDUMP) $(OBJDUMP_DISASM_FLAGS_UNIVERSAL)

clean:
	@rm -rf $(OBJECT_DIR)
	@rm -rf $(BUILD_DIR)
	@rm -rf $(DISASM_CC_DIR)
	@rm -rf $(DISASM_OBJDUMP_DIR)
	@rm -rf $(DISASM_DIR)
